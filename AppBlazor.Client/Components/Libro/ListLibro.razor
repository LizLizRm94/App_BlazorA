@inject NavigationManager navigationManager
@inject LibroService libroService
@inject IJSRuntime JS

@if (lista != null && lista.Count != 0)

{
    <table class="table">
        <thead>
            <tr>
                <th>Imagen</th>
                <th>Id</th>
                <th>Titulo</th>
                <th>Nombre Tipo Libro</th>
                <th>Nombre Archivo</th>
                <th>Operaciones</th>
            </tr>
        </thead>
        <tbody>

            @foreach (var item in lista)

            {
                <tr>
                    <td>
                        <img width="50" height="50" src="@obtenerImagen(item.imagen)" />
                    </td>
                    <td>@item.idlibro</td>
                    <td>@item.titulo</td>
                    <td>@item.nombretipolibro</td>
                    <td>@item.nombrearchivo</td>
                    <td><p @onclick="(() => descargar(item.idlibro, item.nombrearchivo))" style="cursor:pointer; text-decoration:underline">@item.nombrearchivo </p></td>
                    <td>
                        <button class="btn btn-primary" @onclick="(() => recuperarLibro(item.idlibro))">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pen-fill" viewBox="0 0 16 16">
                                <path d="m13.498.795.149-.149a1.207 1.207 0 1 1 1.707 1.708l-.149.148a1.5 1.5 0 0 1-.059 2.059L4.854 14.854a.5.5 0 0 1-.233.131l-4 1a.5.5 0 0 1-.606-.606l1-4a.5.5 0 0 1 .131-.232l9.642-9.642a.5.5 0 0 0-.642.056L6.854 4.854a.5.5 0 1 1-.708-.708L9.44.854A1.5 1.5 0 0 1 11.5.796a1.5 1.5 0 0 1 1.998-.001" />
                            </svg>
                        </button>
                        <button class="btn btn-danger" @onclick="(() => eliminarLibro(item.idlibro))">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                                <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z" />
                                <path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z" />
                            </svg>
                        </button>
                    </td>
                </tr>

            }
        </tbody>
    </table>


}

@code
{
    public List<LibroListCLS> lista { get; set; } = new List<LibroListCLS>();
    private async Task descargar(int idlibro, string nombrearchivo)
    {
        string archivo = libroService.recuperaArchivoPorId(idlibro);
        if (archivo != null && archivo.Length > 0)
        {
            await JS.InvokeVoidAsync("descargarArchivo", archivo, nombrearchivo);
        }
    }
    private string obtenerImagen(byte[]? buffer)
    {
        if (buffer == null)
        {
            return "img/istockphoto-1186065957-612x612.jpg";
        }
        else
        {
            return "data:image/jpg;base64," + Convert.ToBase64String(buffer);
        }
    }
    private void recuperarLibro(int idLibro)

    {

        navigationManager.NavigateTo("/formlibro/edit/" + idLibro);

    }
    public void eliminarLibro(int idLibro)

    {

        libroService.eliminarLibro(idLibro);

        listarLibros();

    }
    private Task filtrar(string titulo)
    {
        lista = libroService.filtrarLibros(titulo);
        StateHasChanged();
        return Task.CompletedTask;
    }
    private void listarLibros()

    {

        lista = libroService.listarLibros();

    }
    protected override Task OnInitializedAsync()
    {
        libroService.OnSearch += filtrar;

        listarLibros();
        return base.OnInitializedAsync();
    }
}
